- var fontawesomeInputName = "sign-in-alt";
- var fontawesomeOutputName = "sign-out-alt";

- var totalIOValues = utils.getTxTotalInputOutputValues(tx, txInputs, blockHeight);

script.
	function showAllTxOutputs(link, txid) {
		var hiddenRows = document.querySelectorAll("[data-txid='" + txid + "']");
		hiddenRows.forEach(function(hiddenRow) {
			hiddenRow.classList.remove("d-none");
		});

		link.classList.add("d-none");
	}

div.row.text-monospace
	div.col-lg-6
		if (txInputs)
			// first we need to special case coinbase transactions cause they have no inputs
			if (tx.vin.length == 0)
				div.clearfix
					div.tx-io-label
						a(data-toggle="tooltip", title=("No input"), style="white-space: nowrap;")
							span.font-weight-bold &gt; 
							small.d-inline.d-md-none Input 
								small.d-inline.d-md-none.font-weight-light.text-muted  / "0" 

					div.tx-io-content
						div.clearfix
							div.tx-io-desc
								small.data-tag.bg-success.mr-2(title="Coinbase transactions are special transactions created by the miner of a block. They distribute the block reward (subsidy) as the miner chooses, along with all of the fees paid by transactions included in the block.", data-toggle="tooltip") coinbase

								div.pt-1
									- var findex = tx.vout.length -1
									small.font-weight-bold(tistle="UTF-8 encoded", data-toggle="tooltip") data
									small (utf-8) - 
									small #{utils.hex2string(tx.vout[findex].scriptPubKey.hex)}
									br
									small
										a(href="javascript:void(0)" onclick="$('#coinbase-data-hex').show(); $(this).hide(); return false;") show raw

								div(id="coinbase-data-hex", style="display: none;")
									small.font-weight-bold data
									small (hex) - 
									small.word-wrap #{tx.vout[findex].scriptPubKey.hex}


			- var extraInputCount = 0;
			each txVin, txVinIndex in tx.vin
				if (tx.vin.length > 0)
					- var vout = null;
					if (txInputs && txInputs[txVinIndex])
						- var txInput = txInputs[txVinIndex];
						- var vout = txInput;

				if (vout)
					div.clearfix
						div.tx-io-label
							a(data-toggle="tooltip", title=("Input #" + txVinIndex.toLocaleString()), style="white-space: nowrap;")
								span.font-weight-bold &gt; 
								small.d-inline.d-md-none Input 

								if (tx.vin.length > 999)
									small.word-wrap ##{txVinIndex}
								else
									span ##{txVinIndex.toLocaleString()}

								small.d-inline.d-md-none.font-weight-light.text-muted  / #{(tx.vin.length - 1).toLocaleString()}

						div.tx-io-content
							div.clearfix
								div.tx-io-desc
									div.word-wrap
										small.data-tag-secondary.border-secondary.mr-2
											span(title=`Input Type: ${utils.outputTypeName(vout.scriptPubKey.type)}`, data-toggle="tooltip") #{utils.outputTypeAbbreviation(vout.scriptPubKey.type)}

										if (vout.coinbaseSpend)
											small.data-tag.bg-success.mr-2
												span(title=`This input spends a coinbase output (mining reward).`, data-toggle="tooltip") coinbase-spend

										if (vout.utxoTime)
											- var deltaT = tx.time - vout.utxoTime
											- var deltaTYears = deltaT / 60 / 60 / 24 / 365

											if (deltaTYears > 5)
												span.mr-2(title=`This UTXO was very old! It existed for ${parseInt(deltaTYears)}+ years - from ${moment.utc(new Date(vout.utxoTime * 1000)).format('MMM D, Y')} until ${moment.utc(new Date(tx.time * 1000)).format('MMM D, Y')} - before being spent (destroyed) in this transaction!`, data-toggle="tooltip")
													i.fas.fa-certificate.text-primary


										a(href=("/tx/" + txInput.txid + "#outpoint-" + txVin.outpoint)) #{utils.ellipsize(txInput.txid, 26)}
											span  ##{txVin.vout}

									if (vout && vout.scriptPubKey && vout.scriptPubKey.addresses)
										div.word-wrap
											small.text-muted
												span.mr-1 (addr:
												a(href=("/address/" + vout.scriptPubKey.addresses[0]), class=(txIOHighlightAddress == vout.scriptPubKey.addresses[0] ? "font-weight-bold" : null)) #{vout.scriptPubKey.addresses[0]}

												if (global.specialAddresses[vout.scriptPubKey.addresses[0]])
													- var specialAddressInfo = global.specialAddresses[vout.scriptPubKey.addresses[0]];
													if (specialAddressInfo.type == "minerPayout")
														span  
														a(data-toggle="tooltip", title=("Miner payout address: " + specialAddressInfo.minerInfo.name))
															i.fas.fa-certificate.text-primary

												span )
										if (vout.scriptPubKey.group)
											- var tokenColor = `hsl(${utils.tokenID2HueSaturation(vout.scriptPubKey.group)},${session.uiTheme && session.uiTheme == "dark" ?'67%':'40%'})`;
											- var hexEcondedTokenID = utils.tokenID2HexString(vout.scriptPubKey.group);
											div.mb-tiny
												small.data-tag.font-weight-bold(style=`display:inline-block;background-color:${tokenColor}!important;margin-left:3px;`)
													span(title="Token ID" data-content=`<ul> <li> ${hexEcondedTokenID} </li> <li> ${vout.scriptPubKey.group} </li></ul>`, data-toggle="popover", data-trigger="click") #{utils.shortenAddress(vout.scriptPubKey.group,35,10)}
											div(style="display:flex")
												if (vout.scriptPubKey.groupAuthority > 0)
													- var activeFlags = utils.tokenAuthToFlags(vout.scriptPubKey.groupAuthority);
													each flag, value in activeFlags
														div.mb-tiny
															small.data-tag.font-weight-bold(style=`display:inline-block;background-color:${tokenColor}!important;margin-rigth:3px;margin-left:3px;`)
																span #{flag}

								div.tx-io-value
									if (txVin.coinbase)
										- var currencyValue = coinConfig.blockRewardFunction(blockHeight, activeBlockchain);
										include ./value-display.pug
									else
										if (vout && vout.value)
											- var currencyValue = vout.value;
											include ./value-display.pug
											if (vout.scriptPubKey.group && vout.scriptPubKey.groupQuantity > 0)
													- var tokenColor = `hsl(${utils.tokenID2HueSaturation(vout.scriptPubKey.group)},${session.uiTheme && session.uiTheme == "dark" ?'67%':'40%'})`;
													div.mb-tiny
														small.data-tag.font-weight-bold(style=`display:inline-block;background-color:${tokenColor}!important;`)
															span(title=`Token Amount`, data-toggle="tooltip") #{vout.scriptPubKey.groupQuantity}

					hr

				else
					- extraInputCount = extraInputCount + 1;

			if (extraInputCount > 0)
				div.clearfix
					div.tx-io-label
						a(data-toggle="tooltip", title=("Input #" + (tx.vin.length - extraInputCount + 1).toLocaleString() + " - " + tx.vin.length.toLocaleString()), style="white-space: nowrap;")
							span.font-weight-bold &gt; 
							span.d-inline.d-md-none Input 
							span #â€¦

					div.tx-io-content
						div.clearfix
							div.tx-io-desc
								span.text-reset #{extraInputCount.toLocaleString()} more input
									if (extraInputCount > 1)
										span s
								br
								small.text-muted (see 
									a(href=("/tx/" + tx.txid)) transaction page
									span  for details)

							div.tx-io-value
								- var currencyValue = new Decimal(totalIOValues.output).minus(new Decimal(totalIOValues.input));
								include ./value-display.pug
				hr

			if (tx.vin.length > 0)
				div.row.mb-5.mb-lg-0
					div.col
						div.font-weight-bold.text-left.text-md-right
							span.d-block.d-md-none Total Input: 
							- var currencyValue = totalIOValues.input;
							include ./value-display.pug




	div.col-lg-6
		- var maxRegularRowCount = (txIOHighlightAddress != null ? config.site.addressPage.txOutputMaxDefaultDisplay : 10000000);
		- var regularRowCount = 0;
		- var hiddenRowCount = 0;
		each vout, voutIndex in tx.vout
			- var highlightRow = false;
			if (txIOHighlightAddress != null && vout.scriptPubKey && vout.scriptPubKey.addresses && vout.scriptPubKey.addresses[0] == txIOHighlightAddress)
				- highlightRow = true;

			if (!highlightRow)
				- regularRowCount++;

			- var hiddenRow = false;
			if (!highlightRow && regularRowCount > maxRegularRowCount)
				- hiddenRow = true;
				- hiddenRowCount++;

			div(data-txid=tx.txid, class=(hiddenRow ? "d-none" : ""))
				div.clearfix
					div.tx-io-label
						a(data-toggle="tooltip", title=("Output #" + voutIndex.toLocaleString()), style="white-space: nowrap;")
							span.font-weight-bold &lt; 
							small.d-inline.d-md-none Output 

							if (tx.vout.length > 999)
								small.word-wrap ##{voutIndex}
							else
								span ##{voutIndex.toLocaleString()}

							if (tx.vout.length > 0)
								small.d-inline.d-md-none.font-weight-light.text-muted  / #{(tx.vout.length - 1).toLocaleString()}

					div.tx-io-content
						div.clearfix
							div.tx-io-desc
								if (vout.scriptPubKey)
									if (vout.scriptPubKey.addresses)
										div.mb-tiny
											small.data-tag.bg-dark
												span(title=`Output Type: ${utils.outputTypeName(vout.scriptPubKey.type)}`, data-toggle="tooltip") #{utils.outputTypeAbbreviation(vout.scriptPubKey.type)}

										each addr in vout.scriptPubKey.addresses
											a(id=("outpoint-" + vout.outpoint), href=("/address/" + addr))
												span.text-monospace.word-wrap(class=(highlightRow ? "font-weight-bold" : "")) #{addr}
											if (vout.scriptPubKey.group)
												- var tokenColor = `hsl(${utils.tokenID2HueSaturation(vout.scriptPubKey.group)},${session.uiTheme && session.uiTheme == "dark" ?'67%':'40%'})`;
												- var hexEcondedTokenID = utils.tokenID2HexString(vout.scriptPubKey.group);
												div.mb-tiny
													small.data-tag.font-weight-bold(style=`display:inline-block;background-color:${tokenColor}!important;margin-left:3px;`)
														span(title="Token ID" data-content=`<ul> <li> ${hexEcondedTokenID} </li> <li> ${vout.scriptPubKey.group} </li></ul>`, data-toggle="popover", data-trigger="click") #{utils.shortenAddress(vout.scriptPubKey.group,35,10)}
												div(style="display:flex")
													if (vout.scriptPubKey.groupAuthority > 0)
														- var activeFlags = utils.tokenAuthToFlags(vout.scriptPubKey.groupAuthority);
														each flag, value in activeFlags
															div.mb-tiny
																small.data-tag.font-weight-bold(style=`display:inline-block;background-color:${tokenColor}!important;margin-rigth:3px;margin-left:3px;`)
																	span #{flag}
																	span

											if (global.specialAddresses[addr])
												- var specialAddressInfo = global.specialAddresses[addr];
												if (specialAddressInfo.type == "minerPayout")
													span  
													a(data-toggle="tooltip", title=("Miner payout address: " + specialAddressInfo.minerInfo.name))
														i.fas.fa-certificate.text-primary

											br

									else if (vout.scriptPubKey.asm && vout.scriptPubKey.asm.startsWith('OP_RETURN '))
										div.mb-tiny
											small.data-tag.bg-primary OP_RETURN

										div
											small.font-weight-bold data
											small (utf-8) - 
											// in hex encoding OP_RETURN is 2 bytes long (0x6a)
											// so we are going to remove the first 2 bytes from the hex value
											small #{utils.hex2string(vout.scriptPubKey.hex.substring(2))}
											br
											small
												a(href="javascript:void(0)" onclick=`$('#op-return-hex-${tx.txid}-${vout.n}').show(); $(this).hide(); return false;`) show raw

										div(id=`op-return-hex-${tx.txid}-${vout.n}`, style="display: none;")
											small.font-weight-bold data
											small (hex) -  
											small.word-wrap #{vout.scriptPubKey.asm}



									else
										div.mb-tiny
											small.data-tag.bg-dark
												span(title=`Output Type: ${utils.outputTypeName(vout.scriptPubKey.type)}`, data-toggle="tooltip") #{utils.outputTypeAbbreviation(vout.scriptPubKey.type)}

										div
											small.font-weight-bold asm
											br
											small.word-wrap #{vout.scriptPubKey.asm}

										div
											small.font-weight-bold hex
											br
											small.word-wrap #{vout.scriptPubKey.hex}

							div.tx-io-value
								if (utxos)
									if (utxos[voutIndex])
										i.fas.fa-lock.text-success.mr-2(title="Unspent output." data-toggle="tooltip")

									else if (utxos[voutIndex] == null)
										i.fas.fa-lock-open.text-secondary.mr-2(title="Spent output." data-toggle="tooltip")

								- var currencyValue = vout.value;
								include ./value-display.pug

								if (vout.scriptPubKey.group && vout.scriptPubKey.groupQuantity > 0)
										- var tokenColor = `hsl(${utils.tokenID2HueSaturation(vout.scriptPubKey.group)},${session.uiTheme && session.uiTheme == "dark" ?'67%':'40%'})`;
										div.mb-tiny
											small.data-tag.font-weight-bold(style=`display:inline-block;background-color:${tokenColor}!important;`)
												span(title=`Token Amount`, data-toggle="tooltip") #{vout.scriptPubKey.groupQuantity}


				hr

		if (hiddenRowCount > 0)
			a(href="javascript:void(0)", onclick=("showAllTxOutputs(this, '" + tx.txid + "');")) Show all #{tx.vout.length.toLocaleString()} outputs

		div.row.mb-0.mb-lg-0
			div.col
				div.font-weight-bold.text-left.text-md-right
					span.d-block.d-md-none Total Output: 
					- var currencyValue = totalIOValues.output;
					include ./value-display.pug


