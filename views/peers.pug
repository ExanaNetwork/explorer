extends layout

block headContent
	+title('Peers')

	link(rel="stylesheet", href="/css/dataTables.bootstrap4.min.css", integrity="sha384-EkHEUZ6lErauT712zSr0DZ2uuCmi3DoQj6ecNdHQXpMpFNGAQ48WjfXCE5n20W+R")

	link(rel="stylesheet", href="https://unpkg.com/leaflet@1.3.3/dist/leaflet.css", integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ==", crossorigin="")

	script(src="https://unpkg.com/leaflet@1.3.3/dist/leaflet.js", integrity="sha512-tAGcCfR4Sc5ZP5ZoVz0quoZDYX5aCtEm/eu1KhSLj2c9eFrylXZknQYmxUssFaVJKvvc0dJQixhGjG2yXWiV9Q==", crossorigin="")
	script(src="https://cdn.jsdelivr.net/npm/chart.js")

	style.
		.versions-hidden-rows, .services-hidden-rows {
			display: none;
		}

		#map { height: 700px; }

block content
	div.mt-5.mt-sm-3
	h3.text-bold Network Peers

	ul.nav.nav-tabs
		li.nav-item
			a.nav-link.text-bold.active(data-toggle="tab", href="#tab-summary", role="tab") Summary
		li.nav-item
			a.nav-link.text-bold(data-toggle="tab", href="#tab-json", role="tab") JSON

	div.tab-content.card.card-body
		div.tab-pane.active(id="tab-summary", role="tabpanel")
			if (peerIpSummary && peerIpSummary.ips)
					div.card.borderless-card.mb-3
						div.card-body
							h5.mb-3.text-bold Peer Map
							div.mb-3(id="map")

			div.card.borderless-card.mb-3
				div.card-body
					h5.mb-3.text-bold #{peerSummary.getpeerinfo.length} 
						if (peerSummary.getpeerinfo.length == 1)
							span Peer connected
						else
							span Peers connected

					table.table.table-striped.table-responsive-sm.data-table.mt-4
						thead
							tr
								th
								th.data-header Version
								th.data-header Address
								th.data-header Services

								if (peerIpSummary && peerIpSummary.ips)
									th.data-header Location
								
								if (peerSummary.getpeerinfo_has_mapped_as)
									th.data-header AS

								th.data-header Last Send / Receive (m:s)

						tbody
							each item, index in peerSummary.getpeerinfo
								- var lastSendAgo = moment.duration(moment.utc(new Date()).diff(moment.utc(new Date(parseInt(item.lastsend) * 1000)))).format().replace("milliseconds", "ms");
								- var lastRecvAgo = moment.duration(moment.utc(new Date()).diff(moment.utc(new Date(parseInt(item.lastrecv) * 1000)))).format().replace("milliseconds", "ms");

								tr
									th.data-cell #{index + 1}

									td.data-cell.text-monospace #{item.subver}
									td.data-cell.text-monospace #{item.addr}
									td.data-cell.text-monospace #{item.services}

									if (peerIpSummary.ips)
										td.data-cell.text-monospace
											- var ipAddr = item.addr.substring(0, item.addr.lastIndexOf(":"));
											if (peerIpSummary.ips && peerIpSummary.ips.includes(ipAddr))
												- var ipDetails = peerIpSummary.detailsByIp[ipAddr];
												if (ipDetails)
													if (ipDetails.city)
														span #{ipDetails.city}, 
													if (ipDetails.regionName)
														span #{ipDetails.regionName}, 
													if (ipDetails.country)
														span #{ipDetails.country}
											else
												span ?

											- var ipAddr = null;

									if (peerSummary.getpeerinfo_has_mapped_as)
										td.data-cell.text-monospace
											a(href="https://bgp.he.net/AS" + item.mapped_as) AS#{item.mapped_as}

									td.ata-cell.text-monospace #{lastSendAgo} / #{lastRecvAgo}
			if (peerIpSummary && peerIpSummary.ips && versionPlot)
				div.card.borderless-card.mb-3
					div.card-body
						h5.mb-3.text-bold Statistics
						div.m-3.d-flex.flex-wrap.justify-content-center
							canvas#host-chart(style="width: 100% !important;height: 400px !important;")
							canvas#version-chart(style="width: 100% !important;height: 400px !important;")
							canvas#country-chart(style="width: 100% !important;height: 400px !important;")

			div.row
				div.col-md-6
					div.card.borderless-card.mb-3
						div.card-body.tab-card
							h5.mb-3.text-bold Top Versions

							table.table.table-striped.table-responsive-sm
								thead
									tr
										th
										th.data-header Version
										th.data-header Count
								tbody
									each item, index in peerSummary.versionSummary
										tr(class=(index >= 5 ? "versions-hidden-rows" : false))
											td.data-cell.font-weight-bold #{index + 1}

											td.data-cell.text-monospace #{item[0]}
											td.data-cell.text-monospace #{item[1].toLocaleString()}


				div.col-md-6
					div.card.borderless-card.mb-3
						div.card-body
							h5.mb-3.text-bold Top Service Flags

							table.table.table-striped.table-responsive-sm
								thead
									tr
										th
										th.data-header Services
										th.data-header Count
								tbody
									each item, index in peerSummary.servicesSummary
										tr(class=(index >= 5 ? "services-hidden-rows" : false))
											td.data-cell.font-weight-bold #{index + 1}
											- var serviceNames = utils.serviceBitsToName(item[0]).join(", ")
											- if (serviceNames == '') {serviceNames = 'None'}
											td.data-cell.text-monospace #{serviceNames}
											td.data-cell.text-monospace #{item[1].toLocaleString()}




		div.tab-pane(id="tab-json", role="tabpanel")
			each item, index in peerSummary.getpeerinfo
				div.border-bottom.p-1
					a(href="javascript:void(0)" onclick=("javascript:var peer = document.getElementById('peerinfo_" + index + "'); peer.style.display = peer.style.display === 'none' ? '' : 'none';"))
						i.fas.fa-plus-circle

					span.text-monospace  #{item.addr}

				div.p-3(style="display: none;", id=("peerinfo_" + index))
					div.card.shadow-sm.mb-3
						div.card-body
							h6.mb-0 Peer Details
							hr
					
							div.highlight
								pre
									code.json.bg-light #{JSON.stringify(item, null, 4)}

					if (peerIpSummary && peerIpSummary.detailsByIp && peerIpSummary.detailsByIp[item.addr.substring(0, item.addr.lastIndexOf(":"))])
						hr

						h6 IP Geo-Location Info
						pre
							code.json.bg-light #{JSON.stringify(peerIpSummary.detailsByIp[item.addr.substring(0, item.addr.lastIndexOf(":"))], null, 4)}

block endOfBody
	script(src="/js/jquery.dataTables.min.js", integrity="sha384-rgWRqC0OFPisxlUvl332tiM/qmaNxnlY46eksSZD84t+s2vZlqGeHrncwIRX7CGp")
	script(src="/js/dataTables.bootstrap4.min.js", integrity="sha384-uiSTMvD1kcI19sAHJDVf68medP9HA2E2PzGis9Efmfsdb8p9+mvbQNgFhzii1MEX")

	script.
		$(document).ready(function() {
			$(".data-table").DataTable();
		});

	if (peerIpSummary && peerIpSummary.ips && mapBoxKey)
		script.
			var key = "#{mapBoxKey}";
			var mymap = L.map('map').setView([19.155466245937028, 4.269182829143086], 3);
			L.tileLayer(`https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=${key}`, {
			attribution: '© <a href="https://www.mapbox.com/about/maps/">Mapbox</a> © <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a> <strong><a href="https://www.mapbox.com/map-feedback/" target="_blank">Improve this map</a></strong>',
				tileSize: 512,
				maxZoom: 18,
				minZoom: 3,
				zoomOffset: -1,
				id: 'mapbox/dark-v11',
				accessToken: key,
				}).addTo(mymap);

			$(document).ready(function() {
				window.dispatchEvent(new Event('resize'));
				
				var versionData = !{JSON.stringify(versionPlot)};
				var countryData = !{JSON.stringify(countryPlot)}; 
				var hostData = !{JSON.stringify(hostPlot)};
				
				function createChart(canvasId, name ,data) {
					var ctx = document.getElementById(canvasId).getContext("2d");
					Chart.defaults.color = "#e9ecef";
					new Chart(ctx, {
						type: "bar",
						data: {
							labels: data.labels,
							datasets: [{
								label: name,
								data: data.data,
								backgroundColor: "#3b82f6",
								borderWidth: 2,
								fill: false
							}]
						},
						options: {
							plugins: {
								title: {
									display: true,
									text: data.label,
									padding: {
										top: 30,
										bottom: 10
									}
								},
							},
							indexAxis: 'y',
							responsive: true,
							maintainAspectRatio: true,
							scales: {
								x: {
									beginAtZero: true,
									grid: {color: "#282828"},
									border: {color: "#e9ecef"},
									ticks: {
										stepSize: 1,
										autoSkip: false
									},
									type: 'linear',
									min: 0,
									x: {
										alignToPixels: true
									}
								},
								y: {
									grid: {color: "#282828"},
									border: {color: "#e9ecef"},
									ticks: {
										callback: function (value) {
											// truncate the labels only in this axis
											const lbl = this.getLabelForValue(value);
											if (typeof lbl === 'string' && lbl.length > 20) {
												return `${lbl.substring(0, 20)}...`;
											}
											return lbl;
										},
										stepSize: 1,
										autoSkip: false
									}
								}
							}
						}
					});
				}

				createChart("version-chart", "Peer Versions",  versionData);
				createChart("host-chart", "Peer Hosts", hostData);
				createChart("country-chart", "Peer Countries", countryData);
			});

		each ipAddress, index in peerIpSummary.ips
			- var ipDetails = peerIpSummary.detailsByIp[ipAddress];
			if (ipDetails && ipDetails.lat && ipDetails.lon)
				- var ipDetailsPopupHtml = "<b>" + ipAddress + "</b><br>";
				if (ipDetails.subver)
					- var ipDetailsPopupHtml = ipDetailsPopupHtml + "<b>" + ipDetails.subver + "</b><br>";
				if (ipDetails.city)
					- var ipDetailsPopupHtml = ipDetailsPopupHtml + ipDetails.city + ", ";

				if (ipDetails.regionName)
					- var ipDetailsPopupHtml = ipDetailsPopupHtml + ipDetails.regionName + ", ";

				if (ipDetails.country)
					- var ipDetailsPopupHtml = ipDetailsPopupHtml + ipDetails.country + " ";

				script.
					var markerColor = "#{ipDetails.marker}";  
					var svgIcon = `
					<svg width="50" height="50" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M249.471 331.27L404 164.501L249.471 418.722L249.471 331.27Z" fill="#FFFD9D"/>
					<path d="M249.546 331.27L96.0007 164.5L249.546 418.722L249.546 331.27Z" fill="#B6761C"/>
					<path d="M404 164.501L96.0011 164.5L249.472 331.27L404 164.501Z" fill="#FFE144"/>
					<path d="M313.556 196.278L186.445 196.278L249.782 264.722L313.556 196.278Z" fill="#B6761C"/>
					<path d="M249.783 189.601L313.414 120.928L249.783 225.611L249.783 189.601Z" fill="#FFFD9D"/>
					<path d="M249.814 189.601L186.587 120.928L249.814 225.611L249.814 189.601Z" fill="#B6761C"/>
					<path d="M313.414 120.928L186.587 120.928L249.783 189.601L313.414 120.928Z" fill="${markerColor}"/>
					</svg>`
					
					var customIcon = L.divIcon({
						className: 'custom-icon',
						html: svgIcon,
						iconSize: [50, 50],  
						iconAnchor: [25, 50],
					});
					
					L.marker([#{ipDetails.lat}, #{ipDetails.lon}], {icon:customIcon}).addTo(mymap).bindPopup("!{ipDetailsPopupHtml}");

